import ConfigParser
import os
import beaver.utils as utils


class Config():
    '''
    Parse a given INI-style config file using ConfigParser module.
    Stanza's names match file names, and properties are defaulted as in
    http://logstash.net/docs/1.1.1/inputs/file

    Config file example:

    [/var/log/syslog]
    type: syslog
    tags: sys,main

    [/var/log/auth]
    type: syslog
    ;tags: auth,main

    [...]
    '''

    def __init__(self, configfile):
        utils.log('processing config file %s' % configfile)
        defaults = {
            'add_field': '',
            'debug': '',
            'discover_interval': '15',
            'exclude': '',
            'format': '',
            'message_format': '',
            'sincedb_path': '',
            'sincedb_write_interval': '15',
            'stat_interval': '1',
            'tags': '',
            'type': ''
        }
        self._configfile = configfile
        self._config = ConfigParser.ConfigParser(defaults)
        self._sanitize()
        self._data = self._parse()

    def _sanitize(self):
        if len(self._config.read(self._configfile)) != 1:
            raise Exception('Could not parse config file "%s"'
                % self._configfile)

    def _parse(self):
        inputs = {}
        for filename in self._config.sections():
            if not self._config.get(filename, 'type'):
                raise Exception('%s: missing mandatory config "type"'
                    % filename
                )
            inputs[os.path.realpath(filename)] = self._config.items(filename)
        return inputs

    def getfilepaths(self):
        return self._data.keys()

    def gettype(self, filename):
        try:
            return self._config.get(os.path.realpath(filename), 'type')
        except ConfigParser.NoSectionError:
            return "file"

    #  TODO: add support for any file property
